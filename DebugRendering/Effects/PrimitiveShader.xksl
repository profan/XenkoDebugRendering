namespace DebugRendering
{

    shader PrimitiveShader : ShaderBase, ColorBase {

        struct TransformData {
            float4x4 Matrix;
        };

        struct ColorData {
            [Color]
            float4 Color;
        };
        
        float4x4 ViewProjection;
        StructuredBuffer<TransformData> Transforms;
        StructuredBuffer<ColorData> Colors;
        int InstanceOffset;

        stream float3 Position : POSITION;
        stream float3 Normal : NORMAL;
        stream float2 Uv : TEXCOORD0;

        override stage void VSMain() {
            int offsetInstanceId = streams.InstanceID + InstanceOffset;
            streams.ShadingPosition = mul(mul(float4(streams.Position, 1), Transforms[offsetInstanceId].Matrix), ViewProjection);
            streams.Normal = mul(mul(float4(streams.Normal, 0), Transforms[offsetInstanceId].Matrix), ViewProjection);
            streams.Color = Colors[offsetInstanceId].Color;
        }

        override stage void PSMain() {

            // streams.ColorTarget = streams.Color;

            float lineWidth = 0.001f;

            float2 uv = streams.Uv;
            float lx = step(lineWidth, uv.x);
            float ly = step(lineWidth, uv.y);
            float hx = step(uv.x, 1.0f - lineWidth);
            float hy = step(uv.y, 1.0f - lineWidth);

            streams.ColorTarget = lerp(streams.Color, float4(0.0f, 0.0f, 0.0f, 0.0f), lx*ly*hx*hy);

        }

    };

}